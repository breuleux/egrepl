
require:
   quaint
   "../lib/repl" ->
      Repl
   "../lib/util" ->
      DOM, repr
   "../lib/doc" ->
      Cards, Nav
   "../lib" ->
      egrepl
   jquery


provide:
   setup

globals:
   document, window, alert, setTimeout
   Element


macro acquire_cards{#data{*filenames}}:

   print .hello
   console.log{___node.require}

   require:
      fs, quaint

   print .there

   globals: __dirname

   dirname = __dirname

   results = #data{}
   dispatch = quaint.dispatch.clone{}
   components = {...} with

      "topic --> contents"{engine, node, {=> topic, => contents}} =
         results.push with #data with
            #value{topic.location.text{}}
            #value{""}
            #value{contents.location.text{}}

      "topic --> desc --> contents"{engine, node, {=> topic, => desc, => contents}} =
         results.push with #data with
            #value{topic.location.text{}}
            #value{desc.location.text{}}
            #value{contents.location.text{}}

   items{components} each {spec, fn} ->
      dispatch.register with quaint.Spec{spec, fn}

   Q = quaint.Engine{dispatch}

   filenames each #value{filename} ->
      f = dirname + "/" + filename
      contents = fs.readFileSync{f, .utf8}
      Q.run{contents}

   ;; quaint mucks this up for some reason
   set __dirname = dirname

   results


__raw_cards =
   acquire_cards with
      "basic.q"
      "examples.q"
      "advanced.q"

globals: decodeURIComponent

parseQuery{q} =
   decode{s} = decodeURIComponent{s.replace{"+", " "}}
   rval = {=}
   search = R.g"([^&=]+)=?([^&]*)"
   var m = search.exec{q}
   while m:
      {_, k, v} = m
      rval[decode{k}] = decode{v}
      m = search.exec{q}
   rval


setup{} =

   repl = egrepl with
      document.getElementById{"box"}
      document.getElementById{"interactive"}
      document.getElementById{"code"}

   cards = Cards{repl} with Nav{document.getElementById{"help"}}
   __raw_cards each {topic, desc, contents} ->
      cards.register{topic, desc, contents}
   cards.make_index{}

   engine = quaint.Engine{quaint.dispatch}

   repl.setenv{{...}} with
      __qengine = engine
      __cards = cards.cards
      __repl = repl
      repl = repl
      DOM = DOM
      $libs = {=}
      jQuery = jquery
      $ = jquery

   repl.eval with S[

      globals:
         alert, document, window

      _next{} =
         "There is no tutorial yet."

      _help{match topic} =
         when __cards[topic] ->
            __cards[topic][1]{0}
         else ->
            "Invalid help topic: \"" + topic + "\""

      macro next{_}:
         `_next{}`

      macro help{match}:
         #void{} -> `_help{"help"}`
         topic -> `_help{^topic}`

      macro Q{arg}:
         `__qengine.run{^arg}`

      loader{url, fn} =
         script = DOM with script %
            async = true
            src = url
            type = "text/javascript"
            onload = fn
         document.head.appendChild{script}
         undefined

      macro load{`^url as ^v`}:
         ```
            splice:
               globals: ^v
               [
                  url = ^url
                  if $libs[url]:
                     then:
                        $out.log with .note %
                           "\"" + url + "\" is already loaded."
                     else:
                        $libs[url] = true
                        __repl.lock{}
                        timer = setTimeout{f, 5000} where f{} =
                           $out.log with .warning %
                              "Loading \"" + url + "\" is taking more than five seconds."
                              "A green box will appear here once if/when it is loaded."
                           __repl.unlock{}
                           $libs[url] = false
                        loader{url} with {} ->
                           $out.log with .success %
                              "Loaded \"" + url + "\"!"
                           __repl.unlock{}
                           clearTimeout{timer}
               ]
         ```
   ]

   repl.process{"help", false}

   q = parseQuery{window.location.search.substring{1}}
   if q.eval:
      repl.process{q.eval}

   repl.cm.focus{}
   repl



