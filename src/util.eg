
require:
   opg ->
      Location, Source
   "opg/lib/highlight" ->
      highlightLocations
   fs
   jquery
   /html
   /dom -> toDOM

provide:
   DOM, dom_node_clear, myrepr as repr
   GenSym, format_error, wait

globals:
   document, window, alert, setTimeout
   Element


wait = promisify with {d, f} -> setTimeout.call{null, f, d}


tag_namespaces = {=}
[tags each tag -> tag_namespaces[tag] = "http://www.w3.org/2000/svg"] where
   tags = {
      .svg
      .circle, .line, .path, .rect, .text, .g
   }


wrapChildren{tag, attrs, var children} =
   children = children each c ->
      wrapper = document.createElement{.span}
      wrapper.appendChild{c}
      if c.className:
         wrapper.className = [c.className.split{" "} each x -> S'container-{x}'].join{" "}
      wrapper
   {tag, attrs, children}

preWrappers = {
   assoc = wrapChildren
   array = wrapChildren
}

collapsible{collapsed}{result, opts} =
   result.onclick{e} =
      e.stopPropagation{}
      [opts.wrapchange or [f -> f{}]] with
         -> jquery{result}.toggleClass{"collapsed"}
   if collapsed:
      result.className += " collapsed"
   result

postWrappers = {
   array = collapsible{false}
   object = collapsible{false}
   instance = collapsible{false}
   class = collapsible{false}
   traceback = collapsible{true}
   error_args = collapsible{true}
}


wrapNode{c} =
   wrapper = document.createElement{.span}
   wrapper.appendChild{c}
   if c.className:
      wrapper.className = [c.className.split{" "} each x -> S'container-{x}'].join{" "}
   wrapper

DOM{match x, opts = {=}} =
   Element? e ->
      e
   Array? args ->
      DOM{% args, opts}
   ENode? e ->

      html{e} with {match _tag, _classes, _attrs, _children, raw} ->

         do:
            orig = this
            var {tag, classes, attrs, children} =
               {_tag, _classes, _attrs, _children}

         .delayed ->
            var expanded = false
            fn = attrs.compute
            expr-value node = DOM{elem, opts} where elem =
               span.collapsed %
                  onclick{e} =
                     e.stopPropagation{}
                     if not expanded:
                        delete node.onclick
                        expanded = true
                        node.className = ""
                        [opts.wrapchange or [f -> f{}]] with
                           -> node.appendChild{DOM{fn{}, opts}}

         else ->

            classes each
               c when preWrappers[c] ->
                  {tag, attrs, children} =
                     preWrappers[c]{tag, attrs, children, orig, opts}

            if [ns = tag_namespaces[String! tag]]:
               set-var attrs = attrs & {namespace = ns}

            var result = toDOM.call{orig, tag, classes, attrs, children, raw}

            classes each
               c when postWrappers[c] ->
                  result = postWrappers[c]{result, opts}

            if attrs and attrs._refid:
               DOM with
                  ".tagged-node" %
                     .reference % attrs._refid
                     result

            elif attrs and ENode? orig:
               ;; This is a dirty hack to display a reference number
               ;; when it is added later by a delayed calculation.
               ;; That number will be written in props._refid, so we
               ;; watch for changes.
               var _theid = undefined
               Object.defineProperty{orig.props, "_refid"} with {
                  configurable = true
                  .get{} = _theid
                  .set{v} =
                     _theid = v
                     wrapper = DOM with
                        ".tagged-node" %
                           .reference % _theid
                     result.parentElement.replaceChild{wrapper, result}
                     wrapper.appendChild{result}
               }
               result

            else:
               result

   else ->
      DOM{% x, opts}


wrapRepr{match x, process} =

   when not[x and x["::lightweight"] and x["::lightweight"]{}]
      \ and process.repr.depth >= 3 ->
      delayed %
         compute{} = process.repr.withState{{depth = 0}}{x}

   Array? and {ast => true?} ->
      astrepr{x} where astrepr{match node} =
         #void{} ->
            .ast.void %
         #symbol{x} ->
            .ast.symbol % process.repr{x}
         #value{x} ->
            .ast.value % process.repr{x}
         #send{f and #symbol{match}, arg and #data{x, y}} ->
            "." when y[0] === .symbol ->
               .ast.value % process.repr{y[1]}
            when node.fromop ->
               .ast.oper %
                  .ast.buffer % astrepr{x}
                  .ast.buffer % astrepr{f}
                  .ast.buffer % astrepr{y}
            else ->
               .ast.send %
                  .ast.buffer % astrepr{f}
                  .ast.buffer % astrepr{arg}
         {kind in {.send, .data, .multi}, *args} ->
            .ast[^["." + kind]] % args each arg -> .ast.buffer % astrepr{arg}
         else ->
            process{node}

   else ->
      process{x}

myrepr{x, wrap = null} =
   r = repr.create{{wrap = wrap or wrapRepr}}
   result = r{x}
   r.seen
   result


dom_node_clear{x} =
   while x.children.length > 0:
      x.removeChild{x.children[0]}


format_error{match e, context = 0} =

   do:
      fmt_args{e} =
         if [e.args and e.args.length]:
            then: .error_args % repr{e.args}
            else: ""

   E.syntax? {args => {args}} ->
      hls = {.hl1, .hl2, .hl3, .hl4}
      locs = enumerate{items{args}} each
         {i, {key, arg}} when arg and arg.location ->
            {arg.location, hls[i mod 4]}
      div %
         div.error %
            div.error_type % e.name
            div.error_message % e.message
         div.error_args.syntax % repr{args}
         highlightLocations{locs, context}

   {location => loc and {=> source, => start, => end}} ->
      div %
         div.error %
            div.error_type % e.name
            div.error_message % e.message
         fmt_args{e}
         highlightLocations{{{loc, .hl1}}, context}
         div.traceback % e.stack or ""

   {location => #location{url, start, end}} ->
      data = fs.readFileSync{url, .utf8} !! e -> null
      if data:
         then:
            loc = Location{Source{data, url}, start, end}
            div %
               div.error %
                  div.error_type % e.name
                  div.error_message % e.message
               fmt_args{e}
               ;; if{e.args, .error_args % repr{e.args}, ""}
               highlightLocations{{{loc, .hl1}}, context}
               div.traceback %
                  div % e.stack or ""
         else:
            div %
               div.error %
                  div.error_type % e.name
                  div.error_message % e.message
               fmt_args{e}
               div.traceback %
                  % e.stack or e

   other ->
      div %
         div.error %
            div.error_type % e.name
            div.error_message % e.message
         ;; if e.args:
         ;;    then: .error_args % repr{e.args}
         ;;    else: ""
         fmt_args{e}
         div.traceback %
            div % e.stack


Error.prototype["::repr"] = {} ->
   format_error{this}


GenSym{prefix} =
   ;; Simple symbol generator.
   ;; g = GenSym{"$"}
   ;; g{} ==> "$0", "$1", "$2", ...
   ;; g{"xyz"} ==> "xyz$0", "xyz$1", "xyz$2", ...
   id = 0
   {pfx = ""} ->
      r = pfx + prefix + [String! id]
      id++
      r
