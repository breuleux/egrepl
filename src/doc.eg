
require:
   fs
   quaint
   "./util" ->
      DOM, dom_node_clear

provide:
   Nav
   acquire_cards
   Cards

globals: __dirname



class Nav:

   constructor{@pane} =
      @tabs = {}

   make_history_label{tab, pos, label, cls} =
      ^["." + cls] %
         label
         onclick{e} =
            @render_tab{tab, pos}

   gettab{match tab} =
      do:
         create{} =
            pages = {}
            box = DOM with
               div.tab %
                  div.tab_header %
                     div.breadcrumbs %
                     div.close_tab %
                        onclick{e} =
                           @tabs[tab] = null
                           dom_node_clear with
                              @pane.children[tab]
                  div % [div %]
            data = {pages, box.children[0].children[0], box.children[1], -1}
            {box, data}

      when @tabs[tab] ->
         @tabs[tab]

      when @tabs[tab] === null ->
         {box, data} = create{}
         @tabs[tab] = data
         @pane.replaceChild with
            box
            @pane.children[tab]
         data

      when tab == @tabs.length ->
         {box, data} = create{}
         @tabs.push with data
         @pane.appendChild with box
         data

      else ->
         throw E.repl.no_such_tab{tab}

   insert_page{tab, var pos, label, page} =
      {pages, ltarget, ptarget, current} = @gettab{tab}
      if pos == -1:
         pos = current + 1 ;;pages.length
      pages.splice{pos}
      pages.push with {label, page}
      @render_tab{tab, pos}

   render_tab{tab, pos} =
      {pages, ltarget, ptarget, _} = @tabs[tab]
      @tabs[tab][3] = pos
      mkh{pos, label, cls} = @make_history_label{tab, pos, label, cls}
      dom_node_clear{ltarget}
      enumerate{pages} each {i, {name, page}} ->
         ltarget.appendChild with DOM with
            match i:
               < pos  -> mkh{i, name, .previous_page}
               == pos -> mkh{i, name, .current_page}
               > pos  -> mkh{i, name, .next_page}
         if i < pages.length - 1:
            ltarget.appendChild with DOM with span.history_separator %
      {_, page} = pages[pos]
      ptarget.replaceChild{..., ptarget.children[0]} with DOM with page

   focus_tab{tab} =
      @pane.children[tab].scrollIntoView{true}




acquire_cards{*, #data{*filenames}} =

   dirname = __dirname

   results = #data{}
   dispatch = quaint.dispatch.clone{}
   components = {...} with

      "topic --> contents"{engine, node, {=> topic, => contents}} =
         results.push with #data with
            #value{topic.location.text{}}
            #value{""}
            #value{contents.location.text{}}

      "topic --> desc --> contents"{engine, node, {=> topic, => desc, => contents}} =
         results.push with #data with
            #value{topic.location.text{}}
            #value{desc.location.text{}}
            #value{contents.location.text{}}

   items{components} each {spec, fn} ->
      dispatch.register with quaint.Spec{spec, fn}

   Q = quaint.Engine{dispatch}

   filenames each #value{filename} ->
      f = dirname + "/" + filename
      contents = fs.readFileSync{f, .utf8}
      Q.run{contents}

   ;; quaint mucks this up for some reason
   set __dirname = dirname

   results



class Cards:

   constructor{@repl, @nav} =
      @cards = {=}
      @Q = quaint.Engine{quaint.dispatch.clone{}}

   clickable{code, text = null} =
      .clickable %
         onclick{e and {shiftKey => match}} =
            do: e.preventDefault{}
            true? ->
               @repl.cm.setValue{code}
               @repl.cm.focus{}
            else ->
               @repl.process_all{code, true, true}
               @repl.cm.focus{}
         text or @repl.highlight{code}

   insert_doc{tab, topic, text = null} =
      .help %
         onclick{e} =
            e.preventDefault{}
            data = @cards[topic]
            match e.which:
               when not data ->
                  @card_displayer{"error", "Error", ...}{tab} with
                     "__ERROR: There is no documentation for `\"" + topic + "\""
               1 ->
                  data[1]{tab}
                  @nav.focus_tab{tab}
               2 ->
                  data[1]{@nav.tabs.length}
         text or topic

   make_row{items} =
      span %
         items each
            first item ->
               item
            item ->
               span % [span.separator % "", item]

   register{topic, description, text} =
      qdesc = @Q.run{description}
      @cards[topic] = {qdesc, @card_displayer{topic, description, text}}

   make_index{} =
      @cards.index = {"Index"} with {tab} ->
         @nav.insert_page{tab, -1, .index} with
            .card % .blocks %
               h2 % .Index
               table %
                  items{@cards}.sort{} each {topic, {desc, f}} ->
                     tr %
                        td % @insert_doc{tab, topic}
                        td % desc
         undefined

   card_displayer{topic, description, text} = {tab} ->

      insert_doc{topic, text = null} =
         @insert_doc{tab, topic, text}

      getcode{node} =
         code = shed{node}.location.text{}
         lines = code.split{"\n"}
         while [R"^ *$"? lines[0]]:
            lines.shift{}
         while [R"^ *$"? lines[lines.length - 1]]:
            lines.pop{}
         R"( *)(.*)"! {_, indent, line0} = lines[0]
         nindent = indent.length
         xs.join{"\n"} where
            xs = {line0} ++
               lines.slice{1} each line ->
                  line.slice{nindent}

      shed{node} =
         chain node:
            quaint.shed{@}

      dispatch = quaint.dispatch.clone{}

      components = {...} with

         "maybe label / code"{engine, node, {label => match, => code}} =
            #text{""} ->
               match quaint.collapse{"/", code}:
                  {x} -> @clickable{getcode{x}}
                  {*xs} -> @make_row with
                     xs each x -> @clickable{getcode{x}, null}
            label ->
               @clickable with
                  getcode{code}
                  engine.run{label}

         "maybe label /? topic"{engine, node, {label => match, => topic}} =
            #text{""} ->
               match quaint.collapse{"/", topic}:
                  {x} -> insert_doc{shed{x}.location.text{}}
                  {*xs} -> @make_row with
                     xs each x -> insert_doc{shed{x}.location.text{}}
            label ->
               insert_doc with
                  shed{topic}.location.text{}
                  shed{label}.location.text{}

      items{components} each {spec, fn} ->
         dispatch.register with quaint.Spec{spec, fn}

      Q = quaint.Engine{dispatch}

      @nav.insert_page{tab, -1, topic, .card % Q.run{text}}
      undefined
