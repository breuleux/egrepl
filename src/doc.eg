
require:
   fs, quaint

provide:
   acquire_cards
   __insert_doc
   card_displayer

globals: __dirname


acquire_cards{*, #data{*filenames}} =

   dirname = __dirname

   results = #data{}
   dispatch = quaint.dispatch.clone{}
   components = {...} with

      "topic --> contents"{engine, node, {=> topic, => contents}} =
         results.push with #data with
            #value{topic.location.text{}}
            #value{""}
            #value{contents.location.text{}}

      "topic --> desc --> contents"{engine, node, {=> topic, => desc, => contents}} =
         results.push with #data with
            #value{topic.location.text{}}
            #value{desc.location.text{}}
            #value{contents.location.text{}}

   items{components} each {spec, fn} ->
      dispatch.register with quaint.Spec{spec, fn}

   Q = quaint.Engine{dispatch}

   filenames each #value{filename} ->
      f = dirname + "/" + filename
      contents = fs.readFileSync{f, .utf8}
      Q.run{contents}

   ;; quaint mucks this up for some reason
   set __dirname = dirname

   results


__clickable{repl, code, text = null} =
   .clickable %
      onclick{e and {shiftKey => match}} =
         do: e.preventDefault{}
         true? ->
            repl.cm.setValue{code}
            repl.cm.focus{}
         else ->
            repl.process_all{code, true, true}
            repl.cm.focus{}
      text or repl.highlight{code}

__insert_doc{directory, repl, tab, topic, text = null} =
   .help %
      onclick{e} =
         e.preventDefault{}
         data = directory[topic]
         match e.which:
            when not data ->
               card_displayer{"error", "Error", ...}{repl, tab} with
                  "__ERROR: There is no documentation for `\"" + topic + "\""
            1 ->
               data[1]{repl, tab}
               repl.nav.focus_tab{tab}
            2 ->
               data[1]{repl, repl.tabs.length}
      text or topic


card_displayer{directory}{topic, description, text}{repl, tab} =

   clickable{code, text = null} =
      __clickable{repl, code, text}

   insert_doc{topic, text = null} =
      __insert_doc{directory, repl, tab, topic, text}

   make_row{items} =
      span %
         items each
            first item ->
               item
            item ->
               span % [span.separator % "", item]

   getcode{node} =
      code = shed{node}.location.text{}
      lines = code.split{"\n"}
      while [R"^ *$"? lines[0]]:
         lines.shift{}
      while [R"^ *$"? lines[lines.length - 1]]:
         lines.pop{}
      R"( *)(.*)"! {_, indent, line0} = lines[0]
      nindent = indent.length
      xs.join{"\n"} where
         xs = {line0} ++
            lines.slice{1} each line ->
               line.slice{nindent}

   shed{node} =
      chain node:
         quaint.shed{@}


   dispatch = quaint.dispatch.clone{}
   components = {...} with

      "maybe label / code"{engine, node, {label => match, => code}} =
         #text{""} ->
            match quaint.collapse{"/", code}:
               {x} -> clickable{getcode{x}}
               {*xs} -> make_row with
                  xs each x -> clickable{getcode{x}, null}
         label ->
            clickable with
               getcode{code}
               engine.run{label}

      "maybe label /? topic"{engine, node, {label => match, => topic}} =
         #text{""} ->
            match quaint.collapse{"/", topic}:
               {x} -> insert_doc{shed{x}.location.text{}}
               {*xs} -> make_row with
                  xs each x -> insert_doc{shed{x}.location.text{}}
         label ->
            insert_doc with
               shed{topic}.location.text{}
               shed{label}.location.text{}

   items{components} each {spec, fn} ->
      dispatch.register with quaint.Spec{spec, fn}

   Q = quaint.Engine{dispatch}

   repl.nav.insert_page{tab, -1, topic, .card % Q.run{text}}
   undefined
