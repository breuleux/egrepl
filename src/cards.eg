
require:
   quaint

provide: make_cards

globals:
   document, window, alert, jQuery, setTimeout, Showdown


macro static_read{*, #value{filename}}:
   require: fs
   globals: __dirname
   f = __dirname + "/" + filename
   contents = fs.readFileSync{f, .utf8}
   #value{contents}


make_cards{repr}{repl} =

   mktable2{x, recur = repr} =
      its = match x:
         Array? -> x
         other -> items{x}
      table %
         its each {k, v} ->
            tr %
               th % recur{k, repr}
               td % recur{v, repr}

   clickable{code, text = null} =
      click{e} =
         e.preventDefault{}
         repl.process{code}
         repl.sink{}
         jQuery{repl.input}.focus{}
      cls = match code:
         R"^help"? -> ".help"
         else -> ".clickable"
      ^cls %
         onclick = click
         text or code

   clickable_row{*items} =
      span %
         items each
            first item ->
               clickable{item}
            item ->
               span % [span.separator % "", clickable{item}]

   getcode{node} =
      code = shed{node}.location.text{}
      lines = code.split{"\n"}
      while [R"^ *$"? lines[0]]:
         lines.shift{}
      while [R"^ *$"? lines[lines.length - 1]]:
         lines.pop{}
      R"( *)(.*)"! {_, indent, line0} = lines[0]
      nindent = indent.length
      xs.join{"\n"} where
         xs = {line0} ++
            lines.slice{1} each line ->
               line.slice{nindent}

   shed{node} =
      chain node:
         quaint.shed{@}
         ;; quaint.shed_indent{@}

   dispatch = quaint.dispatch.clone{}
   components = {...} with

      "maybe label / code"{engine, node, {label => match, => code}} =
         #text{""} ->
            match quaint.collapse{"/", code}:
               {x} -> clickable{getcode{x}}
               {*xs} -> clickable_row{*xs2} where
                  xs2 = xs each x -> getcode{x}
         label ->
            clickable with
               getcode{code}
               label.location.text{}

      "topic --> contents"{engine, node, {=> topic, => contents}} =
         cards[topic.location.text{}] =
            .card % engine.run{contents}

      "topic --> desc --> contents"{engine, node, {=> topic, => desc, => contents}} =
         cards[topic.location.text{}] =
            [.card % engine.run{contents}] &:
               {description = engine.run{desc}}

   items{components} each {spec, fn} ->
      dispatch.register with quaint.Spec{spec, fn}

   cards = {=}

   files = {
      static_read "tutorial.q"
      static_read "cards.q"
   }

   Q = quaint.Engine{dispatch}

   files each file ->
      Q.run{file}

   tutorial = {}
   var i = 0
   while cards["tut" + String{i}]:
      tutorial.push with
         cards["tut" + String{i}]
      i += 1

   tutorial.description = "Earl Grey tutorial"
   cards.tutorial = tutorial

   cards.topics = .card %
      h3 % "Help topics"
      mktable2{{...}} with
         {clickable{"help topics"}, "List all help topics"}
         {clickable{"help variables"}, "Declaring and setting variables"}
         {clickable{"help blocks"}, "Blocks and indent rules"}
   cards.topics.description = "Help starting point"

   cards.index = .card %
      h3 % "Index"
      mktable2 with
         items{cards}.sort{} each {k, v} when not R"^tut[0-9]+"? k ->
            {clickable{"help " + k, k}, v.description}

   cards

