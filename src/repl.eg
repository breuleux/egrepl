
require:
   .util ->
      DOM, repr as _repr
      GenSym, wait
   jquery as jQuery

provide:
   Outputter, Repl, repr

globals:
   document, alert, setTimeout
   Element

let repr = _repr


gensym-r = GenSym{"$repple_"}

gensym = GenSym{"io_"}



class Outputter:

   constructor{@elem, @sink = false} =
      pass

   log{*data} =
      result = 
         DOM with div %
            data each match x ->
               Element? or ENode? -> x
               else -> .repple-data % repr{x}
      @elem.appendChild{result}
      if @sink:
         set-timeout{f, 0} where f{} =
            jQuery{@elem}.scroll-top{@elem.scroll-height}
      result


class Repl:

   constructor{opts} =
      ;; Required fields
      @opts = opts
      opts as {
         elements => {
            repl => @box
            scrollback => @target
            replarea => @textarea
         }
         eval => @eval
         setenv => @setenv
         lang => @lang = "javascript"
         theme => @theme = "default"
         continuate => @continuate = null
         codemirror => @CodeMirror
      }

      @pass = @CodeMirror.Pass

      if not @CodeMirror.run-mode:
         throw E.repple.run-mode{"Missing run mode for CodeMirror. Try to require('codemirror/addon/runmode/runmode')"}

      @repple = {
         io = {}
         current = -1
      }
      @repple-symbol = gensym-r{}
      @setenv with {
         @repple-symbol => @repple
      }

      ;; Optional fields
      @inputline = opts.elements.inputline
      @keymap = opts.elements.keymap or {=}

      if opts.sink:
         @sink = opts.sink

      @keymap or= {=}
      @setup_cm{@textarea}
      @cursor = 0
      @history = {""}

   setup_cm{textarea} =

      @cm = @CodeMirror.fromTextArea with
         textarea
         {
            indentUnit = @opts.indent or 3
            viewportMargin = 1/0
            theme = @theme
            ;; lineNumbers = true
         }

      @cm.addKeyMap{km & @keymap} where km = {

         Enter{cm} =
            match @continuate:
               Function? ->
                  if @continuate{cm}:
                     @sink{}
                     @pass
                  else:
                     @submit{}
               === false ->
                  @sink{}
                  @pass
               match when cm.line-count{} === 1 ->
                  null? or undefined? ->
                     @submit{}
                  String? s or RegExp? s ->
                     if cm.get-line{0}.match{s}:
                        @sink{}
                        @pass
                     else:
                        @submit{}
                  else ->
                     @sink{}
                     @pass
               else ->
                  @sink{}
                  @pass

         "Shift-Enter" = "newlineAndIndent"

         "Ctrl-Enter"{cm} =
            @submit{}

         "Ctrl-Up"{cm} =
            if [@cursor > 0]:
               @cm.setValue with @history[-- @cursor]
               @cm.setCursor{@cm.lineCount{}, 0}
               @sink{}

         "Ctrl-Down"{cm} =
            if [@cursor < @history.length - 1]:
               @cm.setValue with @history[++ @cursor]
               @cm.setCursor{0, @cm.getLine{0}.length}
               @sink{}

         Up{match cm} =
            when @cursor > 0 and @cm.getCursor{}.line === 0 ->
               @cm.setValue with @history[-- @cursor]
               @cm.setCursor{@cm.lineCount{}, 0}
               @sink{}
            else ->
               @pass

         Down{match cm} =
            when [@cursor < @history.length - 1 and
                  \ @cm.getCursor{}.line === [@cm.lineCount{} - 1]] ->
               @cm.setValue with @history[++ @cursor]
               @cm.setCursor{0, @cm.getLine{0}.length}
               @sink{}
            else ->
               @pass

         Tab = "indentAuto"

         "Ctrl-L"{_} =
            jQuery{@target}.empty{}

         "Ctrl-A" = "goLineStart"
         "Ctrl-E" = "goLineEnd"
         "Ctrl-K" = "killLine"
      }

      @cm.setOption{"mode", @lang}
      @cm.setSize{.auto, .auto}

   sink{} =
      f{} = jQuery{@box}.scrollTop{@box.scrollHeight}
      setTimeout{f, 0}
      setTimeout{f, 10}

   add_to_history{text} =
      hl = @history.length
      if [text !== "" and not [hl > 1 and @history[hl - 2] == text]]:
         ;; Only add to history if the command was nonempty
         ;; and we're not repeating the same command
         @history[hl - 1] = text
         @history.push{""}
      @cursor = @history.length - 1

   async submit{} =
      text = @cm.getValue{}
      if @inputline:
         jQuery{@inputline}.hide{}
      var done = false
      try:
         await any {
            f{} where async f{} =
               res = await @process_all{text, true, true}
               done = true
               res
            wait{10000}
         }
         ;; await @process_all{text, true, true}
      catch e:
         done = true
         console.log with e.stack
      if not done:
         @repple.io[@repple.current].log with 
            "Request is taking too much time... executing in the background..."
      if @inputline:
         jQuery{@inputline}.show{}
      @cm.setValue{""}
      @cm.focus{}

   highlight{text, inline = false} =
      hl = {}
      @CodeMirror.runMode{text or " ", @lang} with {text, style} ->
         hl.push with
            if style:
               then: span[^[".cm-" + style]] % text
               else: span % text
      if inline:
         span %
            class = 'CodeMirror cm-s-{@theme}'
            hl
      else:
         div %
            class = 'CodeMirror cm-s-{@theme}'
            hl

   async process_all{text, display_in = true, sink = false} =
      text.split{"\n===\n"} each part ->
         await @process{part, display_in, sink}

   async process{text, display_in = true, sink = false} =

      ;; Show the input
      if display_in:
         @add_to_history{text}
         @target.appendChild with DOM with
            div.repple-in %
               div.repple-inbanner %
               div.repple-entry % @highlight{text}
         if sink:
            @sink{}

      ;; Set up the output box
      obox = DOM with
         div % id = gensym{}
      @repple.current += 1
      @repple.io.push with Outputter{obox}
      @target.appendChild{obox}

      ;; Compute the result
      result = await @eval{text}

      ;; Display the result
      obox.appendChild with DOM{node, opts} where

         node = f{result} where f{match} =
            when text.trim{} === "" ->
               ""
            #success{undefined?} ->
               ""
            #success{ENode? n} ->
               n
            #success{value} ->
               try:
                  div.repple-out %
                     div.repple-outbanner %
                     div.repple-result % .repple-data % repr{value}
               catch e:
                  f{#failure{e}}
            #failure{error} ->
               console.error{error}
               div.repple-err %
                  div.repple-errbanner %
                  div.repple-result %
                     .repple-data %
                        repr{error} !! e ->
                           console.error{e}
                           "Failed to print error."

         opts = {
            async wrapchange{f} =
               at_top = @box.scrollTop + jQuery{@box}.height{} == @box.scrollHeight
               f{}
               if at_top:
                  jQuery{@box}.scrollTop{@box.scrollHeight}
         }

      ;; Optionally pull the focus to the bottom where the result is
      if sink:
         @sink{}
         @cm.focus{}

