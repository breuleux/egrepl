
require:
   "earlgrey" as eg
   "earlgrey/lib/expand" ->
      topscope
   "./repl" ->
      Repl
   "./util" ->
      DOM, repr as _repr
   "./doc" ->
      Cards, Nav
   "./editor" ->
      Editor
   codemirror as CodeMirror

provide:
   eg
   egrepl, egeditor
   Repl, DOM, repr
   Cards, Nav

let repr = _repr

globals:
   System


egrepl{box, interactive, inputline, code} =

   gene = eg.Generator{true, "$eg$global"}

   repl = Repl with

      box, interactive, inputline, code

      async: {text} ->
         try:
            ;; print gene.generate{eg.Source{text, "<repl>"}}.code
            #success{await gene.evaluateInteractive{eg.Source{text, "<repl>"}, opts}} where
               opts = {to5 = true}
            ;; #success{gene.evaluate{eg.Source{text, "<repl>"}}}
         catch e:
            ;; print .FAILURE
            ;; console.error{e}
            #failure{e}

      {...} with
         ;; smart parentheses
         "'('"{cm} =
            cur = cm.getCursor{}
            tok = cm.getTokenAt{cur}
            situation =
               predicate! stringtype{x} =
                  x in {.string, .interpolated, .quote}
               match tok.type:
                  stringtype? when tok.end > cur.ch ->
                     .string
                  stringtype? when R"\"$"? tok.string or R"^\."? tok.string ->
                     .id
                  stringtype? ->
                     .string
                  .operator or .wordop or .open or .punctuation or === null ->
                     .op
                  else ->
                     .id
            match situation:
               .string -> CodeMirror.Pass
               .op -> cm.replaceSelection{"["}
               .id -> cm.replaceSelection{"{"}

         "')'"{cm} =
            cur = cm.getCursor{}
            tok = cm.getTokenAt{cur}
            situation =
               match tok.type:
                  .string when tok.end > cur.ch ->
                     .string
                  .string when R"\"$"? tok.string or R"^\."? tok.string ->
                     .other
                  .string ->
                     .string
                  else ->
                     .other
            match situation:
               .string -> CodeMirror.Pass
               else ->
                  match tok.state.nest:
                     {*, {match, *}} ->
                        "{" -> cm.replaceSelection{"}"}
                        "[" -> cm.replaceSelection{"]"}
                        else -> CodeMirror.Pass
                     else ->
                        CodeMirror.Pass

   glob = gene.evaluate{eg.Source{s, "<repl>"}} where
      s = "globals: [global, window], if{typeof{global} === .undefined, window, global}"

   repl.setenv{values} =
      items{values} each {name, value} ->
         gene.env.bind{topscope, name, #variable{name}}
         glob[name] = value
      undefined

   repl.setenv{{...}} with
      $io = {}
      $current = -1
      System = System
      DOM = DOM

   repl.eval with S[
      wait = promisify with {d, f} -> setTimeout.call{null, f, d}
      macro print{expr}:
         out = @mark{`$out`}
         `t = ^expr, $out.log{t}, t`
      macro __require{#data{expr}}:
         ```
         t = ^expr
         name = match t:
            RegExp{"^raw:"}? x -> x.slice{4}
            RegExp{":"}? x -> x
            x -> "npm:" + x
         await System.import{name}
         ```
      macro $out{match}:
         do:
            globals: $current
         #void{} ->
            `$io[^=$current]`
         expr ->
            `$io[^=$current][^expr]`
   ]

   repl


egeditor{target, success, failure, live = true} =

   gene = eg.Generator{true}

   ed = Editor with
      target

      {...} with
         ;; smart parentheses
         "'('"{cm} =
            cur = cm.getCursor{}
            tok = cm.getTokenAt{cur}
            situation =
               match tok.type:
                  .string when tok.end > cur.ch ->
                     .string
                  .string when R"\"$"? tok.string or R"^\."? tok.string ->
                     .id
                  .string ->
                     .string
                  .operator or .wordop or .open or .punctuation or === null ->
                     .op
                  else ->
                     .id
            match situation:
               .string -> CodeMirror.Pass
               .op -> cm.replaceSelection{"["}
               .id -> cm.replaceSelection{"{"}

         "')'"{cm} =
            cur = cm.getCursor{}
            tok = cm.getTokenAt{cur}
            situation =
               match tok.type:
                  .string when tok.end > cur.ch ->
                     .string
                  .string when R"\"$"? tok.string or R"^\."? tok.string ->
                     .other
                  .string ->
                     .string
                  else ->
                     .other
            match situation:
               .string -> CodeMirror.Pass
               else ->
                  match tok.state.nest:
                     {*, {match, *}} ->
                        "{" -> cm.replaceSelection{"}"}
                        "[" -> cm.replaceSelection{"]"}
                        else -> CodeMirror.Pass
                     else ->
                        CodeMirror.Pass

      {text} ->
         try:
            #success{gene.evaluate{eg.Source{text, "<ed>"}}}
         catch e:
            #failure{e}

      success, failure, live

   ed.eval{text} = gene.evaluate{eg.Source{text, "<ed>"}}
   ed
